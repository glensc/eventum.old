<?php
/* vim: set expandtab tabstop=4 shiftwidth=4 encoding=utf-8: */
// +----------------------------------------------------------------------+
// | Eventum - Issue Tracking System                                      |
// +----------------------------------------------------------------------+
// | Copyright 2011, Elan RuusamÃ¤e <glen@delfi.ee>                        |
// +----------------------------------------------------------------------+
// |                                                                      |
// | This program is free software; you can redistribute it and/or modify |
// | it under the terms of the GNU General Public License as published by |
// | the Free Software Foundation; either version 2 of the License, or    |
// | (at your option) any later version.                                  |
// |                                                                      |
// | This program is distributed in the hope that it will be useful,      |
// | but WITHOUT ANY WARRANTY; without even the implied warranty of       |
// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        |
// | GNU General Public License for more details.                         |
// |                                                                      |
// | You should have received a copy of the GNU General Public License    |
// | along with this program; if not, write to:                           |
// |                                                                      |
// | Free Software Foundation, Inc.                                       |
// | 59 Temple Place - Suite 330                                          |
// | Boston, MA 02111-1307, USA.                                          |
// +----------------------------------------------------------------------+

require_once 'PHPUnit/Framework.php';
require_once 'TestSetup.php';

/**
 * Test class for Mail_Helper.
 * Generated by PHPUnit on 2011-01-18 at 21:44:32.
 */
class Mail_HelperTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Mail_Helper
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Mail_Helper;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testGetMessageID()
    {
        $headers = '';
        $body = 'body';
        $msgid = $this->object->getMessageID($headers, $body);
        $this->assertRegExp('<eventum\.md5\.[0-9a-z]+\.[0-9a-z]+@'.APP_HOSTNAME.'>', $msgid, 'Missing msg-id header');

        $headers = "Message-ID: <msgid>";
        $body = 'body';
        $msgid = $this->object->getMessageID($headers, $body);
        $this->assertEquals($msgid, '<msgid>', 'normal msg-id header');

        $headers = "message-id: <msgid>";
        $body = 'body';
        $msgid = $this->object->getMessageID($headers, $body);
        $this->assertEquals($msgid, '<msgid>', 'normal msg-id header (lowercase)');

        // try header continuation \n\t
        $headers = "Message-ID:\n\t<msgid>";
        $body = 'body';
        $msgid = $this->object->getMessageID($headers, $body);
        $this->assertEquals($msgid, '<msgid>', 'msg-id header with newline');

        // try header continuation \n<space>
        $headers = "Message-ID:\n <msgid>";
        $body = 'body';
        $msgid = $this->object->getMessageID($headers, $body);
        $this->assertEquals($msgid, '<msgid>', 'msg-id header with newline');

        $headers = "X-Some-header:y\r\nMessage-ID:\n\t<msgid>\nX-Other_header: x";
        $body = 'body';
        $msgid = $this->object->getMessageID($headers, $body);
        $this->assertEquals($msgid, '<msgid>', 'msg-id header with newline, following next header');
    }

    public function testRemoveExcessReSubjectOnly()
    {
        $subject = 'subject';
        $res = $this->object->RemoveExcessRe($subject);
        $this->assertEquals($res, 'subject', 'no reply prefix');

        $subject = 're: subject';
        $res = $this->object->RemoveExcessRe($subject);
        $this->assertEquals($res, 're: subject', 're: once');

        $subject = 're: re: subject';
        $res = $this->object->RemoveExcessRe($subject);
        $this->assertEquals($res, 'Re: subject', 're: twice');

        $subject = 're[2]: re: subject';
        $res = $this->object->RemoveExcessRe($subject);
        $this->assertEquals($res, 'Re: subject', 're[2]: with squares');
    }

    public function testRemoveExcessReIssueId()
    {
        $subject = '[#123] subject';
        $res = $this->object->RemoveExcessRe($subject, true);
        $this->assertEquals($res, 'subject', 'no reply prefix');

        $subject = 're: [#123] subject';
        $res = $this->object->RemoveExcessRe($subject, true);
        $this->assertEquals($res, 're: subject', 're: once');

        $subject = 're: re: [#123] subject';
        $res = $this->object->RemoveExcessRe($subject, true);
        $this->assertEquals($res, 'Re: subject', 're: twice');

        $subject = 're[2]: [#123] re: subject';
        $res = $this->object->RemoveExcessRe($subject, true);
        $this->assertEquals($res, 'Re: subject', 're[2]: with squares');
    }
}
